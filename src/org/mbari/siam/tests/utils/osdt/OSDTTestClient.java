/*
Copyright 2013 MBARI, all rights reserved. 
For license and copyright details, see COPYRIGHT.TXT in the SIAM project
home directory.
*/
package org.mbari.siam.tests.utils.osdt;

import java.util.StringTokenizer;
import java.util.Iterator;
import java.util.Vector;
import java.net.*;
import java.io.*;

import com.rbnb.sapi.*;
import org.mbari.siam.foce.devices.controlLoop.OSDTConnectorWorker;
import org.mbari.siam.foce.devices.controlLoop.OSDTInputConnector;
import org.mbari.siam.foce.devices.controlLoop.WorkerThread;
import org.mbari.siam.foce.utils.CLOTHProtocol;
import org.mbari.siam.distributed.devices.ControlInputIF;
import org.mbari.siam.utils.TCPProtocol;
import org.mbari.siam.utils.TCPClient;
import org.mbari.siam.tests.utils.osdt.OSDTTestProtocol;

import org.apache.log4j.Logger;
import org.apache.log4j.BasicConfigurator;
import org.apache.log4j.ConsoleAppender;
import org.apache.log4j.PatternLayout;
import org.apache.log4j.PropertyConfigurator;

public class OSDTTestClient extends TCPClient{
	static protected Logger _log4j = Logger.getLogger(OSDTTestClient.class);  

	Vector commands=new Vector();
	
	public OSDTTestClient(){
		super();
		/*
		 * Set up a simple configuration that logs on the console. Note that
		 * simply using PropertyConfigurator doesn't work unless JavaBeans
		 * classes are available on target. For now, we configure a
		 * PropertyConfigurator, using properties passed in from the command
		 * line, followed by BasicConfigurator which sets default console
		 * appender, etc.
		 */
		//PropertyConfigurator.configure(System.getProperties());
		//PatternLayout layout = new PatternLayout("%r %-5p %x %c{1} [%t]: %m%n");
		//BasicConfigurator.configure(new ConsoleAppender(layout));
	}
	public OSDTTestClient(String host, int port, TCPProtocol protocol){
		super(host,port,protocol);
	}
	
	public void sendCommands()
	throws Exception{
		for(Iterator i=commands.iterator();i.hasNext();){
			String command=(String)i.next();
			String returnLine=sendCommand(command);
			_log4j.debug("server response:\n"+returnLine);
		}
	}
	
	public String sendCommand(String command)
	throws Exception{
		_log4j.debug("sending command ["+command+"]");
		String test=writeRead(command);
		_log4j.debug("command returned ["+test+"]");
		return test;
	}
	
	public void printHelp(){
		StringBuffer sb=new StringBuffer();
		sb.append("\n");
		sb.append("OSDT Test Client - Change values of Data Turbine streams generated byt OSDT Test Server\n");
		sb.append("                   Also use to query/command running CLOTH instance\n");
		sb.append("\n");
		sb.append("testHarnessClient [-h <host> -p <port> -o -t -c <command> [-c <command>...]]\n");
		sb.append("\n");
		sb.append("-h <host>    : OSDT server host address            ["+_serverHost+"]\n");
		sb.append("-p <port>    : server TCP/IP port                  ["+_tcpPort+"]\n");
		sb.append("-o           : use OSDT Test Protocol\n");
		sb.append("-t           : use CLOTH Protocol                  [default]\n");
		sb.append("-c <command> : command (send -c help for protocol help)\n");
		sb.append("\n");
		System.out.println(sb.toString());
	}
		
	public void configure(String[] args) throws Exception{
		super.configure(args);
		
		if(args.length<=0){
			return;
		}
		for(int i=0;i<args.length;i++){
			String arg=args[i];
			if(arg.equals("-help") || arg.equals("--help")){
				printHelp();
				System.exit(1);
			}
			if(arg.equals("-h")){
				//_serverHost=args[i+1];
				i++;
			}else if(arg.equals("-p")){
				//_tcpPort=Integer.parseInt(args[i+1]);
				i++;
			}else if(arg.equals("-o")){
				_log4j.debug("setting client protocol to OSDTTest");
				_protocol=new OSDTTestProtocol();
			}else if(arg.equals("-t")){
				_log4j.debug("setting client protocol to CLOTH");
				_protocol=new CLOTHProtocol();
			}else if(arg.equals("-c")){
				commands.add(args[i+1]);
				i++;
			}else{
				commands.add(args[i]);			
			}
		}
		if(_protocol==null){
			_log4j.debug("defaulting to CLOTH protocol");
			_protocol=new CLOTHProtocol();
		}
	}
	
	public static void main(String[] args){
		/*
		 * Set up a simple configuration that logs on the console. Note that
		 * simply using PropertyConfigurator doesn't work unless JavaBeans
		 * classes are available on target. For now, we configure a
		 * PropertyConfigurator, using properties passed in from the command
		 * line, followed by BasicConfigurator which sets default console
		 * appender, etc.
		 */
		PropertyConfigurator.configure(System.getProperties());
		PatternLayout layout = new PatternLayout("%r %-5p %x %c{1} [%t]: %m%n");
		BasicConfigurator.configure(new ConsoleAppender(layout));
		
		try {
			
			OSDTTestClient client=new OSDTTestClient();
			client.configure(args);
			_log4j.debug("connecting...");
			client.connect();
			client.sendCommands();
			client.disconnect();
			_log4j.debug("done");
		} catch (Exception se) { se.printStackTrace(); }
    }
}