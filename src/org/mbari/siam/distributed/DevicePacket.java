// Copyright 2001 MBARI
package org.mbari.siam.distributed;

import java.io.DataOutput;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.io.Serializable;
import java.io.IOException;

/**
 * DevicePacket is a container for data or metadata which originates at a
 * particular device, and forms the base of a packet class hierarchy, which
 * includes SensorDataPacket, DeviceMessagePacket, and MetadataPacket.
 * DevicePackets are generated by DeviceServices, written to DeviceLogs, and
 * telemetered to shore. DevicePacket attributes include the following:
 * <ul>
 * <li>ISI ID - uniquely identifies the source device of this DevicePacket
 * <li>timestamp - Time at which this DevicePacket data was generated
 * <li>sequence number - increments by 1 for each DevicePacket generated by the
 * device; missing or out-of-sequence packets can be inferred from
 * discontinuities in sequence number. If a DeviceLog does not yet exist at the
 * time of DevicePacket generation, the log is created and the DevicePacket
 * sequence number is set to '0'. Sequence number is incremented by '1' for each
 * subsequent DevicePacket generated and logged by the device.
 * <li>Metadata reference - the sequence number of the most recent
 * MetadataPacket which precedes this DevicePacket; provides "metadata context"
 * for this DevicePacket.
 * </ul>
 * 
 * @author Tom O'Reilly
 * @see SensorDataPacket
 * @see MetadataPacket
 *  
 */
public class DevicePacket implements Serializable {

    /** SensorDataPacket flag */
    public static final int SENSORDATA_FLAG = 01;

    /** MetaDataPacket flag */
    public static final int METADATA_FLAG = 02;

    /** DeviceMessagePacket flag */
    public static final int DEVICEMESSAGE_FLAG = 04;

    /** SummaryPacket flag */
    public static final int SUMMARY_FLAG = 010;


    /** Convenience - all packet type flags.*/
    public static final int ALL_TYPES = 0xFFFF;

    /** Header size - used by PacketStats and aggregator.
	Anything application-critical code that uses this
	definition should verify that it matches 
	the actual class definition and platforms.

	This currently represents the size (in bytes)
	of 6 longs.
	
    */
    public static final int HEADER_BYTES=48;

	
    
    /** Serial version ID */
    private static final long serialVersionUID = 0L;

    private long _sourceID;

    private long _systemTime;

    private long _sequenceNo;

    private long _metadataRef;

    private long _parentID;

    private long _recordType;

    public DevicePacket() {
    }

    /**
     * @param sourceID
     *            unique identifier of source device
     */
    public DevicePacket(long sourceID) {
	_sourceID = sourceID;
	_sequenceNo = 0;
	_metadataRef = 0;
    }

    /** Set the packet "creation time" */
    public void setSystemTime(long systemTime) {
	_systemTime = systemTime;
    }

    /** Get packet "creation time". */
    public long systemTime() {
	return _systemTime;
    }

    /** Return ISI ID of packet source. */
    public long sourceID() {
	return _sourceID;
    }

    /**
     * Return "sequence number" of the packet. Sequence number increments by 1
     * for each packet by the packet source ID.
     */
    public long sequenceNo() {
	return _sequenceNo;
    }

    /**
     * Return "metadataRef sequence number" of the packet. The metadataRef is
     * the sequence number of the metadata packet which applies to this packet.
     */
    public long metadataRef() {
	return _metadataRef;
    }

    /**
     * Set the packet sequence number. Should be called whenever a "new" packet
     * is generated.
     */
    public void setSequenceNo(long sequenceNo) {
	_sequenceNo = sequenceNo;
    }

    /**
     * Each packet should refer to the sequence number of the last metadata
     * packet. Should be called whenever a "new" packet is generated.
     */
    public void setMetadataRef(long sequenceNo) {
	_metadataRef = sequenceNo;
    }

    /** Get parentID field */
    public long getParentId() {
	return _parentID;
    }

    /** Set parentID field */
    public void setParentId(long id) {
	_parentID = id;
    }

    /** Get recordType field */
    public long getRecordType() {
	return _recordType;
    }

    /** Set recordType field */
    public void setRecordType(long type) {
	_recordType = type;
    }

    /** Return String representation. */
    public String toString() {
	return new String("parentID=" + _parentID + ", recordType="
			  + _recordType + "\n" + "devid=" + _sourceID + ", t="
			  + _systemTime + ", seqNo=" + _sequenceNo + ", mdref="
			  + _metadataRef + "\n");
    }

    /** Utility method; return true if byte is printable. */
    static protected boolean isPrintable(byte c) {

	if ((c < 0x20 || c > 0x7e) && (c < 0x09 || c > 0x0D)) {
	    return false;
	} else {
	    return true;
	}
    }

    /** Utility method used in subclass' toString() methods. */
    protected static void convertToAscii(byte[] buffer) {
	for (int i = 0; i < buffer.length; i++) {

	    if (!isPrintable(buffer[i])) {
		buffer[i] = '*';
	    }
	}
    }
}

